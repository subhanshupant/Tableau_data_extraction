# -*- coding: utf-8 -*-
"""index.py.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xSBz1JOSL9w-FIDCYbHcFpqrY5Po4ipf
"""


import tkinter as tk
from tkinter import filedialog
from tkinter import messagebox
import os
import xml.etree.ElementTree as ETree
import pandas as pd
import html
import sys
import zipfile
import openpyxl


def get_filters(root):
    filters_list = []
    for i in root.iter('worksheet'):
        try:
            filters = i.find('filters')
            if filters is not None:
                for f in filters.iter('filter'):
                    filter_data = {}
                    filter_data['worksheet'] = i.attrib['name']
                    filter_data['filter_type'] = f.attrib['class']
                    filter_data['caption'] = f.attrib['caption']
                    filter_data['field'] = f.attrib['column']
                    filters_list.append(filter_data)
        except:
            pass
    return pd.DataFrame(filters_list)

def get_parameters(root):
    parameters_list = []
    for param in root.iter('worksheet-parameter'):
        param_data = {}
        param_data['worksheet'] = param.attrib['worksheet']
        param_data['name'] = param.attrib['name']
        param_data['data-type'] = param.attrib['data-type']
        parameters_list.append(param_data)
    return pd.DataFrame(parameters_list)

def get_actions(root):
    actions_list = []
    for i in root.iter('zone'):
        try:
            action_data = {}
            action_data['worksheet'] = i.attrib['worksheet']
            action_data['name'] = i.attrib['name']
            action_data['source-sheet'] = i.attrib.get('source-sheet', None)
            action_data['target-sheet'] = i.attrib.get('target-sheet', None)
            actions_list.append(action_data)
        except:
            pass
    return pd.DataFrame(actions_list)

def workbook(root):
  rd=[]
  for i in root.iter('worksheet'):
      try:
          #print(i.attrib['name'])
          ds_list=[]
          data_list=[]
          attr=i.attrib
          #print("<>")
          for ds in i.iter('datasource'):
              dct1=ds.attrib
              ds_list.append(dct1)
          df_ds_map=pd.DataFrame(ds_list)
          for j in i.iter('datasource-dependencies'):
              dct=j.attrib
              #print(dct)
              #print("break/n")
              for cl in j.iter('column'):
                  col=cl.attrib
                  col['datasource']=dct['datasource']
                  col['worksheet']=i.attrib['name']
                  #print("this is new column")
                  if cl.find('calculation') is not None:
                      for cal in cl.iter('calculation'):
                          cal_list=cal.attrib
                          col['calculation']=cal_list['formula']
                  else:
                      col['calculation']=""


                  #for cal in cl.iter('calculation'):
                      #cal_list=cal.attrib
                  #col['calculation']=cal_list['formula']
                  #col['calculation']=''


                  if all(key in col for key in ("caption", "name","datasource")):
                      col['name']=col['name'].replace(']','')
                      col['name']=col['name'].replace('[','')
                      data_list.append(col)
                  elif all(key in col for key in ("datatype", "name","datasource")):
                      col['caption']=col['name']
                      col['name']=col['name'].replace(']','')
                      col['name']=col['name'].replace('[','')
                      col['caption']=col['caption'].replace(']','')
                      col['caption']=col['caption'].replace('[','')
                      data_list.append(col)
          df_data=pd.DataFrame(data_list)
          #print(df_data.head())

          df_ds_map.rename(columns = {'caption':'table_name'}, inplace = True)
          df_ds_map.rename(columns = {'name':'datasource'}, inplace = True)

          final_data=pd.merge(df_data,df_ds_map,on=["datasource"],how="left")
          final_data=final_data[["caption","name","table_name","worksheet","calculation"]]
          rd.append(final_data)
      except:
          t=0

  wb_data=pd.concat(rd)
  # Convert 'calculation' column to pandas.Series
  wb_data['calculation'] = pd.Series(wb_data['calculation'])

  # Decoding the 'calculation' column
  wb_data['calculation'] = wb_data['calculation'].apply(html.unescape)
  wb_data=replace_calc(wb_data)
  wb_data=wb_data.groupby(['table_name','worksheet','caption','name','calculation'],as_index=True).sum(1)
  return wb_data

def replace_calc(wb_data):
  wb_data=wb_data.reset_index()
  iter_data=wb_data.groupby(['name', 'caption'],as_index=False).sum(1)
  for i in range(len(iter_data['name'])):
    x_name=iter_data['name'][i]
    x_caption=iter_data['caption'][i]
    for j in range(len(wb_data['calculation'])):
      cal=wb_data['calculation'][j]
      if "["+x_name+"]" in cal:
        wb_data.loc[j, 'calculation'] = wb_data.loc[j, 'calculation'].replace("["+x_name+"]", "["+x_caption+"]")
  return wb_data


def extract_xml_from_twbx(file_path):
    # Extract the XML file from the twbx package
    with zipfile.ZipFile(file_path, "r") as zip_file:
        xml_file = None
        for name in zip_file.namelist():
            if name.endswith(".twb"):
                xml_file = name
                break

        if xml_file is None:
            raise ValueError("No .twb file found inside the .twbx package.")

        extracted_path = os.path.join(os.path.dirname(file_path), os.path.basename(xml_file))
        with open(extracted_path, "wb") as xml_out:
            xml_out.write(zip_file.read(xml_file))

    return extracted_path

def process_tableau_file(file_path):
    if file_path.endswith(".twbx"):
        file_path = extract_xml_from_twbx(file_path)
    try:
        prstree = ETree.parse(file_path)
        root = prstree.getroot()

        # Extracting metadata for filters, parameters, and actions
        filters_df = get_filters(root)
        parameters_df = get_parameters(root)
        actions_df = get_actions(root)

        # # Extracting metadata for table calculations
        df = workbook(root)

        output_path = file_path.split(".twb")[0] + ".xlsx"

        # Save the metadata to separate sheets in the Excel file
        with pd.ExcelWriter(output_path) as writer:
            df.to_excel(writer, sheet_name='Table Calculations')
            if not filters_df.empty:
                filters_df.to_excel(writer, sheet_name='Filters', index=False)
            if not parameters_df.empty:
                parameters_df.to_excel(writer, sheet_name='Parameters', index=False)
            if not actions_df.empty:
                actions_df.to_excel(writer, sheet_name='Actions', index=False)

        print("Data and metadata extracted successfully and saved to '{}'.format(output_path)".format(output_path))
        return df, filters_df, parameters_df, actions_df

    except ETree.ParseError as e:
        print(f"Error parsing XML: {e}")
        return None, None, None, None
    except IOError as e:
        print(f"I/O Error: {e}")
        return None, None, None, None
    except Exception as e:
        print(f"Error processing Tableau file: {e}")
        return None, None, None, None


class TableauMetadataApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Tableau Metadata Extraction")

        self.input_file_path = ""
        self.output_file_path = ""

        self.input_label = tk.Label(root, text="Input Tableau File:")
        self.input_label.pack()

        self.input_browse_button = tk.Button(root, text="Browse", command=self.browse_input_file)
        self.input_browse_button.pack()

        self.output_label = tk.Label(root, text="Output Excel File:")
        self.output_label.pack()

        self.output_browse_button = tk.Button(root, text="Browse", command=self.browse_output_file)
        self.output_browse_button.pack()

        self.process_button = tk.Button(root, text="Process and Show Metadata", command=self.process_and_show)
        self.process_button.pack()

        self.results_text = tk.Text(root)
        self.results_text.pack()

        self.download_button = tk.Button(root, text="Download Results", command=self.download_results)
        self.download_button.pack()

    def browse_input_file(self):
        self.input_file_path = filedialog.askopenfilename(title="Select Tableau File", filetypes=[("Tableau Workbooks", "*.twb;*.twbx")])

    def browse_output_file(self):
        self.output_file_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel Files", "*.xlsx")], title="Select Output File")

    def process_and_show(self):
        if self.input_file_path:
            main_data, _, _, _ = process_tableau_file(self.input_file_path)
            if main_data is not None:
                self.results_text.delete("1.0", tk.END)
                self.results_text.insert(tk.END, main_data.to_string())
            else:
                messagebox.showerror("Error", "An error occurred while processing the file.")

    def download_results(self):
        if self.input_file_path:
            main_data, _, _, _ = process_tableau_file(self.input_file_path)
            if main_data is not None:
                if self.output_file_path:
                    output_directory = os.path.dirname(self.output_file_path)
                    if not os.path.exists(output_directory):
                        os.makedirs(output_directory)

                    with pd.ExcelWriter(self.output_file_path) as writer:
                        main_data.to_excel(writer, sheet_name='Table Calculations')

                    messagebox.showinfo("Download Complete", f"Results downloaded as '{self.output_file_path}'.")
                else:
                    messagebox.showerror("Error", "Please select an output file path.")
            else:
                messagebox.showerror("Error", "An error occurred while processing the file.")

if __name__ == "__main__":
    root = tk.Tk()
    app = TableauMetadataApp(root)
    root.mainloop()
